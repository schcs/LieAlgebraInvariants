def testeMatDerL(n,m):
    l = gap.NilpotentLieAlgebra(QQ, [n,m])
    L = algLieGAPparaSAGE(l)
    bEspL = baseEspAlgNil(L)
    Lesp = algLieNilMudBase(L, bEspL)
    bEspLesp = baseEspAlgNil(Lesp)
    for i in range(n):
        print("Matriz de x{}". format(i))
        print(matrizDer(bEspLesp[i],Lesp))
        print("----------------")

#E = consEst(Lesp, bEspLesp)
#Eesc = E.echelon_form()

def operElem(M,cAlt,a,cAux,b):
  M[:,cAlt] = a*M[:,cAlt] + b*M[:,cAux]

def testeMatDerLalt(n,m):
    l = gap.NilpotentLieAlgebra(QQ, [n,m]) #[6,7]
    L = algLieGAPparaSAGE(l)
    bEspL = baseEspAlgNil(L)
    Lesp = algLieNilMudBase(L, bEspL)
    bEspLesp = baseEspAlgNil(Lesp)
    Id = matrix.identity(n)
    for i in range(n-1):
      operElem(Id, i, 1, i+1, 1)
    operElem(Id, 5, 1, 2, 1)
    operElem(Id, 5, 1, 3, 1)
    operElem(Id, 2, 1, 1, 1)
    bAltL = [Lesp.zero()]*n
    for i in range(n):
        for j in range(n):
            bAltL[i] = bAltL[i] + Id[j,i]*bEspLesp[j]
    Lalt = algLieNilMudBase(Lesp, bAltL)
    bEspLalt = baseEspAlgNil(Lalt)
    LaltEsp = algLieNilMudBase(Lalt, bEspLalt)
    bEspLaltEsp = baseEspAlgNil(LaltEsp)
    for i in range(n):
        print("Matriz de x{}". format(i))
        print(matrizDer(bEspLaltEsp[i],LaltEsp))
        print("----------------")

def testeLalt(n,m):
    l = gap.NilpotentLieAlgebra(QQ, [n,m]) #[6,7]
    L = algLieGAPparaSAGE(l)
    bEspL = baseEspAlgNil(L)
    Lesp = algLieNilMudBase(L, bEspL)
    bEspLesp = baseEspAlgNil(Lesp)
    Id = matrix.identity(n)
    for i in range(n-1):
      operElem(Id, i, 1, i+1, 1)
    operElem(Id, 5, 1, 2, 1)
    operElem(Id, 5, 1, 3, 1)
    operElem(Id, 2, 1, 1, 1)
    bAltL = [Lesp.zero()]*n
    for i in range(n):
        for j in range(n):
            bAltL[i] = bAltL[i] + Id[j,i]*bEspLesp[j]
    Lalt = algLieNilMudBase(Lesp, bAltL)
    bEspLalt = baseEspAlgNil(Lalt)
    return algLieNilMudBase(Lalt, bEspLalt)

#E = consEst(LaltEsp, bEspLaltEsp)
#bAltL = [
#-2*bEspLesp[0] + bEspLesp[2] + bEspLesp[4],
#3*bEspLesp[1] + bEspLesp[3],
#bEspLesp[0] + bEspLesp[1] + bEspLesp[2],
#-bEspLesp[3] + bEspLesp[4],
#bEspLesp[0] + bEspLesp[1] + bEspLesp[4] + bEspLesp[5],
#-bEspLesp[2] + bEspLesp[3]
#]

def testeMatDerLalea(n,m):
    l = gap.NilpotentLieAlgebra(QQ, [n,m])
    L = algLieGAPparaSAGE(l)
    Lalea = algLieIsoAlea(L)
    bEspLalea = baseEspAlgNil(Lalea)
    LaleaEsp = algLieNilMudBase(Lalea, bEspLalea)
    bEspLaleaEsp = baseEspAlgNil(LaleaEsp)
    for i in range(n):
        print("Matriz de x{}". format(i))
        print(matrizDer(bEspLaleaEsp[i],LaleaEsp))
        print("----------------")

#E = consEst(LaleaEsp, bEspLaleaEsp)
